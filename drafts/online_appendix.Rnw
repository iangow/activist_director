\Sexpr{set_parent('../activist_directors.Rnw')}
\Sexpr{opts_chunk$set(echo=FALSE, warning=FALSE, cache=TRUE, message=FALSE)}

\renewcommand{\thesection}{IA\arabic{section}} %% letter numbering
\renewcommand{\thetable}{IA.\arabic{table}} %% letter.number table

\section{Online appendix}

<<IA_selection_libraries, cache=FALSE, include=FALSE>>=
require(stargazer)
library(DBI)
library(dplyr, warn.conflicts = FALSE)
library(xtable)
library(tidyr)
@

<<IA_selection_functions, include=FALSE>>=
# Functions to extract fitted models, etc. from list of lists
# constructed by fit.model function below.
source("https://raw.githubusercontent.com/iangow/acct_data/master/code/cluster2.R")

getFitted <- function(list) {
    temp <- list()
    for (i in 1:length(list)) {
        temp[[i]] <- list[[i]][[1]]
    }
    return(temp)
}

# Get standard errors
getSEs <- function(a.list) {
    temp <- list()
    for (i in 1:length(a.list)) {
        temp[[i]] <- a.list[[i]][[2]][,2]
    }
    return(temp)
}

# Get p-values
getPs <- function(a.list) {
    temp <- list()
    for (i in 1:length(a.list)) {
        temp[[i]] <- a.list[[i]][[2]][,4]
    }
    return(temp)
}

# Get pseudo-R2s
getPseudoR2s <- function(a.list) {
    temp <- list()
    for (i in 1:length(a.list)) {
        temp[[i]] <- formatC(a.list[[i]][[3]], digits = 3, format = "f")
    }
    return(unlist(temp))
}

combineVars <- function(vars) {
    paste(unlist(strsplit(vars, "\\s+")), collapse=" + ")
}

fit.model <- function(data, lhs, rhs, cluster1) {
    model <- paste0(lhs, " ~ ", combineVars(rhs))
    fitted <- glm(model, data=data, na.action="na.exclude", family="binomial")
    fitted_constant <- glm(paste(lhs, "~ 1"), data = reg.data,
                           na.action = "na.exclude",
                           family = "binomial")
    pseudoR2 <- 1- logLik(fitted)[[1]]/logLik(fitted_constant)[[1]]
    fitted.cluster <- coeftest.cluster(data, fitted, cluster1 = cluster1)
    # fitted.cluster <- sandwich::vcovCL(fitted, cluster1=cluster1)
    return(list(fitted, fitted.cluster, pseudoR2))
}
@

<<IA_selection_data, include=FALSE>>=
# PostgreSQL Connection
pg <- dbConnect(RPostgres::Postgres(), bigint = "integer")

rs <- dbExecute(pg, "SET search_path TO activist_director")
rs <- dbExecute(pg, "SET work_mem='3GB'")

outcome_controls <- tbl(pg, "outcome_controls")
activism_events <- tbl(pg, "activism_events")
activist_demands <- tbl(pg, "demands")
activist_director_skills <- tbl(pg, "activist_director_skills")

link_table <-
  activism_events %>%
  select(campaign_ids) %>%
  mutate(campaign_id = unnest(campaign_ids)) %>%
  distinct() %>%
  compute()

skills <-
  activist_director_skills %>%
  inner_join(link_table, by = "campaign_id") %>%
  select(-skillset_bio, -last_name, -first_name, -campaign_id, -num_skills) %>%
  group_by(campaign_ids) %>%
  summarize(across(-campaign_ids, bool_or)) %>%
  compute()

min_date <-
    outcome_controls %>%
    summarise(min(eff_announce_date, na.rm = TRUE)) %>%
    pull()

min_date_sql <- sql(paste0("'", min_date, "'::date - interval '1 year'"))

prob_activist_director <-
    outcome_controls %>%
    mutate(category = coalesce(category, "_none"),
           activism = coalesce(activism, FALSE),
           activist_demand = coalesce(activist_demand, FALSE),
           activist_director = coalesce(activist_director, FALSE),
           affiliated_director = coalesce(num_affiliate_directors > 0, FALSE),
           analyst = coalesce(analyst, 0),
           inst = coalesce(inst, 0)) %>%
    filter(datadate >= min_date_sql) %>%
    collect()

prob_activist_demands <-
  outcome_controls %>%
  left_join(activist_demands, by = "campaign_ids") %>%
  mutate(category = coalesce(category, "_none"),
         across(c(activism, activist_demand, activist_director),
                ~ coalesce(., FALSE)),
         affiliated_director = coalesce(num_affiliate_directors > 0, FALSE),
         across(c(analyst, inst), ~ coalesce(., 0))) %>%
  filter(datadate >= min_date_sql) %>%
  collect()

prob_activist_director_skills <-
    activist_demands %>%
    left_join(skills, by = "campaign_ids") %>%
    distinct() %>%
    collect()

rs <- dbDisconnect(pg)

win01 <- function(x, prob = 0.01, p_low = prob, p_high = 1 - prob) {
  cuts <- quantile(x, probs = c(p_low, p_high), type = 2, na.rm = TRUE)
  x[x < cuts[1]] <- cuts[1]
  x[x > cuts[2]] <- cuts[2]
  x
}

win_vars <- c("bv", "mv", "btm", "size_return", "size_return_m1", "leverage",
                 "capex", "dividend", "roa", "sale_growth", "analyst", "inst")

# Update Data - Winsorization
prob_activist_director <-
    prob_activist_director %>%
    mutate(across(win_vars, win01)) %>%
    mutate_at(c("year", "sic2"), as.factor)

prob_activist_demands <-
    prob_activist_demands %>%
    mutate(across(win_vars, win01)) %>%
    mutate_at(c("year", "sic2"), as.factor)
@

  \begin{table}[htb]
    \caption{Activist target selection}
            \begin{minipage}[t]{\columnwidth}
%    \begin{flushleft}
  {\small
This table presents logit regression where the dependent variables are indicators for
being targeted for activism in any category
(\textit{Non-board activism}, \textit{Board demand}, or \textit{Activist director}, column 1),
being the target of an activist demanding or getting board seats (\textit{Board demand}, Column 2), and activists getting board seats (\textit{Activist director}, Column 3).
Sample includes firm-years with and without activism.
    \newline}
%  \end{flushleft}
  \end{minipage}
\begin{tabularx}{5in}{l*{3}{Y}}
% \multicolumn{3}{l}{Panel A: Activism, board demands and activist directors} \\
<<IA_Table_1, dependson=c("IA_selection_functions", "IA_selection_data"), results='asis'>>=
# Panel A
rhs.1 <- "analyst inst size_return mv btm leverage dividend roa sale_growth
            num_directors outside_percent age tenure staggered_board sic2 year"

reg.data <- as.data.frame(prob_activist_director)

t3.pa <- list()
t3.pa[[1]] <- fit.model(data = reg.data,
                  lhs="activism", rhs=rhs.1, cluster1="permno")
t3.pa[[2]] <- fit.model(data = reg.data,
                  lhs="activist_demand", rhs=rhs.1, cluster1="permno")
t3.pa[[3]] <- fit.model(data = reg.data,
                  lhs="activist_director", rhs=rhs.1, cluster1="permno")

stargazer(getFitted(t3.pa),
        dep.var.labels = c("Activism",
                            "Board demand",
                            "Activist director"),
        covariate.labels = c("Analyst", "Inst", "Size-adj. ret", "Market value", "Book-to-market",
                              "Leverage", "Payout", "ROA", "Sales growth",
                              "Num. directors", "Outside percent", "Age", "Tenure",
                              "Staggered board"),
        se=getSEs(t3.pa),
        p= getPs(t3.pa),
        omit=c("^sic", "^year", "^Constant"),
       float=FALSE, align=TRUE, font.size="small",
       keep.stat=c("n"), no.space=TRUE,
       add.lines=list(c("Pseudo-$R^2$", getPseudoR2s(t3.pa))))

rm(t3.pa)
@
\end{tabularx}
\addtocounter{table}{-1}
\end{table}

<<IA_quantreg_libraries, cache=FALSE>>=
library(survival)
library(quantreg)
library(DBI)
library(dplyr, warn.conflicts = FALSE)
library(xtable)
@

<<IA_quantreg_data_step, include=FALSE, warning=FALSE>>=
pg <- dbConnect(RPostgres::Postgres())

rs <- dbExecute(pg, "SET work_mem = '5GB'")
rs <- dbExecute(pg, "SET search_path TO activist_director, public")

activist_holdings <- tbl(pg, "activist_holdings")
activism_events <- tbl(pg, "activism_events")
activist_demands <- tbl(pg, "demands")

activist_exit <-
    activist_holdings %>%
    group_by(activist_name, permno, entry_date) %>%
    summarize(exit = bool_or(exit), .groups = "drop") %>%
    compute()

survival_data <-
    activist_holdings %>%
    select(-exit) %>%
    inner_join(activist_exit, by = c("activist_name", "permno", "entry_date")) %>%
    filter(!is.na(permno), activism, quarter>0,
           !activist_name %in% c("California State Teachers Retirement System",
                                 "New York State Common Retirement Fund",
                                 "Ontario Teachers' Pension Plan Board",
                                 "The California Public Employees Retirement System")) %>%
    select(activist_name, permno, exit, entry_date, eff_announce_date,
           first_appointment_date, exit_date, affiliated) %>%
    distinct() %>%
    collect()

holding_period_by_demand <-
    activism_events %>%
    select(permno, eff_announce_date, campaign_ids) %>%
    left_join(activist_demands, by = "campaign_ids") %>%
    collect()

demand_types <- c("acquisition", "block_acquisition", "divestiture", "payout",
                  "leverage", "remove_director", "add_indep", "remove_officer",
                  "remove_defense", "compensation", "other_go")
demand_type_regex <- paste0(demand_types, collapse = "|")
outcome_regex <- paste0("(", demand_type_regex, ")_outcome")
demand_regex <- paste0("(", demand_type_regex, ")_demand")

survival_data_by_demand <-
    survival_data %>%
    left_join(holding_period_by_demand,
              by = c("permno", "eff_announce_date")) %>%
    mutate(across(ends_with("_outcome"), ~ coalesce(., FALSE))) %>%
    rowwise() %>%
    mutate(any_outcome = any(c_across(matches(outcome_regex))),
           any_demand = any(c_across(matches(demand_regex))))

rs <- dbDisconnect(pg)
@

<<IA_quantreg_analysis, dependson="IA_quantreg_data_step", include=FALSE>>=
# data ready
surv <- with(survival_data,
             Surv(as.numeric(exit_date - entry_date), exit, type='right'))

#### Exit since Entry
quantreg1 <- crq(Surv(as.numeric(exit_date - entry_date), exit, type='right') ~ affiliated,
                 tau=0.5,
                 data=survival_data,
                 na.action="na.omit",
                 method="Portnoy")
summary1 <- summary(quantreg1, taus = c(0.5, 0.75))

#### Exit since Announcement
quantreg2 <- crq(Surv(as.numeric(exit_date - eff_announce_date), exit, type='right') ~ affiliated,
                 taus=0.5,
                 data=survival_data,
                 na.action="na.omit",
                 method="Portnoy")
summary2 <- summary(quantreg2, taus = c(0.5, 0.75))

#### Exit since Appointment
quantreg3 <- crq(Surv(as.numeric(exit_date - first_appointment_date), exit, type='right') ~ affiliated - 1,
                 data = subset(survival_data, !is.na(first_appointment_date)),
                 taus = 0.5,
                 na.action = "na.omit",
                 method = "Portnoy")
summary3 <- summary(quantreg3, taus = c(0.5, 0.75))
@

<<IA_get_coeffs, include=FALSE>>=
getCoefs <- function(model, ncols=3) {

    coefs <- model[[1]][["coefficients"]]
    ncols <- dim(coefs)[1]
    makeRow <- function(i) {

        # Get the coefficients and SEs, calculate p-values
        coef <- coefs[i, 1]
        se   <- coefs[i, 4]
        p    <- coefs[i, 6]

        # Standard stars
        stars <- ifelse(p < 0.01, "^{***}",
                        ifelse(p < 0.05, "^{**}",
                               ifelse(p < 0.1, "^{*}", " ")))

        # Add stars to coefficients, put parentheses around SEs
        bind_rows(tibble(row_type = "coef",
                         variable = rownames(coefs)[i],
                         value = paste0(formatC(coef, digits = 1, format="f"), stars)),
                  tibble(row_type = "se",
                         variable = rownames(coefs)[i],
                         value = paste0("(", formatC(se, digits = 1, format="f"), ")")))
    }

    # We have three coefficients we want to combine into a column and return
    return(bind_rows(lapply(1:ncols, makeRow)))
}
@

<<IA_make_panels, dependson="IA_quantreg_analysis", include=FALSE>>=
# Get coefficients for each column
col1 <- getCoefs(summary1)
col2 <- getCoefs(summary2)
col3 <- getCoefs(summary3)

# Combine columns into a table
panel1 <-
  col1 %>%
  full_join(col2, by = c("row_type", "variable"))  %>%
  full_join(col3, by = c("row_type", "variable")) %>%
  mutate(variable = if_else(row_type == "se", "", variable)) %>%
  mutate(variable =
           case_when(variable == "affiliatedaffiliated" ~ "Affiliated director",
                     variable == "affiliatedunaffiliated" ~ "Unaffiliated director",
                     variable == "(Intercept)" ~ "Intercept")) %>%
  select(-row_type)

colnames(panel1) <- c("", "\\textrm{Entry--exit}", "\\textrm{Annc--exit}",
                      "\\textrm{Appt--exit}")

# Make a second panel with statistics for estimated holding periods for
# Activist director cases
coefs <- summary1[[1]]$coefficients[ , 1]
col1 <- rbind(coefs["(Intercept)"],
              coefs["(Intercept)"] + coefs["affiliatedaffiliated"],
              coefs["(Intercept)"] + coefs["affiliatedunaffiliated"])

coefs <- summary2[[1]]$coefficients[ , 1]
col2 <- rbind(coefs["(Intercept)"],
              coefs["(Intercept)"] + coefs["affiliatedaffiliated"],
              coefs["(Intercept)"] + coefs["affiliatedunaffiliated"])

coefs <- summary3[[1]]$coefficients[ , 1]
col3 <- rbind(NA,
              coefs["affiliatedaffiliated"],
              coefs["affiliatedunaffiliated"])

panel2 <- cbind(col1, col2, col3)
colnames(panel2) <- c("\\textrm{Entry--exit}", "\\textrm{Annc--exit}", "\\textrm{Appt--exit}")
row.names(panel2) <- c("Other activism", "Affiliated director", "Unaffiliated director")
@

<<IA_quantreg_analysis_by_demand_2, dependson="IA_quantreg_data_step", include=FALSE>>=
# data ready
surv <- with(survival_data_by_demand,
             Surv(as.numeric(exit_date - entry_date), exit, type='right'))

#### Entry to Exit
quantreg1 <- crq(Surv(as.numeric(exit_date - entry_date), exit, type='right') ~ affiliated*any_outcome,
                 taus=0.5,
                 data=subset(survival_data_by_demand, any_demand),
                 na.action="na.omit",
                 method="Portnoy")
summary1 <- summary.crq(quantreg1, taus = c(0.5, 0.75))

#### Announcement to Exit
quantreg2 <- crq(Surv(as.numeric(exit_date - eff_announce_date), exit, type='right') ~ affiliated*any_outcome,
                 taus=0.5,
                 data=subset(survival_data_by_demand, any_demand),
                 na.action="na.omit",
                 method="Portnoy")
summary2 <- summary.crq(quantreg2, taus = c(0.5, 0.75))

#### Appointment to Exit
quantreg3 <- crq(Surv(as.numeric(exit_date - first_appointment_date), exit, type='right') ~
                   affiliated * any_outcome - any_outcome - 1,
                 data=subset(subset(survival_data_by_demand, any_demand),
                             !is.na(first_appointment_date)),
                 taus=0.5,
                 na.action="na.omit",
                 method="Portnoy")
summary3 <- summary(quantreg3, taus = c(0.5, 0.75))
@

<<IA_make_panels_2, dependson="IA_quantreg_analysis", include=FALSE>>=
# Get coefficients for each column
# Combine columns into a table
panel3 <-
  getCoefs(summary1) %>%
  full_join(getCoefs(summary2), by = c("row_type", "variable"))   %>%
  full_join(getCoefs(summary3), by = c("row_type", "variable")) %>%
  mutate(variable = if_else(row_type == "se", "", variable)) %>%
  mutate(variable = case_when(variable == "affiliatedaffiliated" ~ "Affiliated director",
                              variable == "affiliatedunaffiliated" ~ "Unaffiliated director",
                              variable == "any_outcomeTRUE" ~ "Success",
                              variable == "affiliatedaffiliated:any_outcomeTRUE" ~
                                "Affiliated director $\\times$ Success",
                              variable == "affiliatedunaffiliated:any_outcomeTRUE" ~
                                "Unaffiliated director $\\times$ Success",
                              variable == "(Intercept)" ~ "Intercept",
                              TRUE ~ variable)) %>%
  select(-row_type)

colnames(panel3) <- c("", "\\textrm{Entry--exit}", "\\textrm{Annc--exit}",
                      "\\textrm{Appt--exit}")

# Make a second panel with statistics for estimated holding periods for
# Activist director cases
coefs <- summary1[[1]]$coefficients[, 1]
col1 <- rbind(coefs["(Intercept)"],
              coefs["(Intercept)"] + coefs["any_outcomeTRUE"],
              coefs["(Intercept)"] + coefs["affiliatedaffiliated"],
              coefs["(Intercept)"] + coefs["affiliatedaffiliated"] +
                coefs["any_outcomeTRUE"],
              coefs["(Intercept)"] + coefs["affiliatedunaffiliated"],
              coefs["(Intercept)"] + coefs["affiliatedunaffiliated"] +
                coefs["any_outcomeTRUE"])

coefs <- summary2[[1]]$coefficients[, 1]
col2 <- rbind(coefs["(Intercept)"],
              coefs["(Intercept)"] + coefs["any_outcomeTRUE"],
              coefs["(Intercept)"] + coefs["affiliatedaffiliated"],
              coefs["(Intercept)"] + coefs["affiliatedaffiliated"] +
                coefs["any_outcomeTRUE"],
              coefs["(Intercept)"] + coefs["affiliatedunaffiliated"],
              coefs["(Intercept)"] + coefs["affiliatedunaffiliated"] +
                coefs["any_outcomeTRUE"])

coefs <- summary3[[1]]$coefficients[, 1]
col3 <- rbind(NA, NA,
              coefs["affiliatedaffiliated"],
              coefs["affiliatedaffiliated"] +
                coefs["affiliatedaffiliated:any_outcomeTRUE"],
              coefs["affiliatedunaffiliated"],
              coefs["affiliatedunaffiliated"] +
                coefs["affiliatedunaffiliated:any_outcomeTRUE"])

panel4 <- cbind(col1, col2, col3)
colnames(panel4) <- c("\\textrm{Entry--exit}", "\\textrm{Annc--exit}",
                      "\\textrm{Appt--exit}")
row.names(panel4) <- c("Other activism $\\times$ Not success",
                       "Other activism $\\times$ Success",
                       "Affiliated director $\\times$ Not success",
                       "Affiliated director $\\times$ Success",
                       "Unaffiliated director $\\times$ Not success",
                       "Unaffiliated director $\\times$ Success")
@
\begin{table}[htb]
  \caption{Activist holding periods}
   \label{tbl:holdings_by_outcome}
  \begin{minipage}[t]{\linewidth}
\tabularnewline
\small
This table presents results of censored median regression analysis of holding period (days) on activism category and outcomes.
\textit{Entry--exit} refers to the time (in days) between the record date of the first filing by the activist where the target stock is listed in the activist's portfolio through to the record date of the first filing where it is not (exit date)
\textit{Annc--exit} refers to the time between announcement of activism and the exit date.
\textit{Appt--exit} refers to the time between the first activist director appointment and the exit date.
\newline
\end{minipage}
% Following was copied from .tex output from stargazer.
Activist holding periods by outcome \\
\\
\begin{tabular}{l D{.}{.}{0} D{.}{.}{0} D{.}{.}{0} }

\multicolumn{2}{l}{Regression coefficients} \\
\hline
<<IA_survival_panel3, dependson="IA_make_panels_2", results='asis'>>=
# Output the table
print(xtable(panel3,
             display=c("s", rep("f",(dim(panel3)[2])))),
      include.rownames=FALSE,  include.colnames=TRUE, only.contents=TRUE,
      size="small", type="latex", sanitize.text.function=function(x){x},
      format.args = list(big.mark = ","))
@
\end{tabular}
\\
\begin{tabular}{lD{.}{.}{0} D{.}{.}{0} D{.}{.}{0} }
\\
\multicolumn{2}{l}{Implied median holding periods (days)} \\
\hline
\\
<<IA_survival_panel4, dependson="IA_make_panels_2", results='asis'>>=
# Output the table
print(xtable(panel4,
             display=c("s", rep("f",(dim(panel4)[2]))),
             digits = 1),
      include.rownames=TRUE, include.colnames=TRUE, only.contents=TRUE,
      size="small", type="latex",
      sanitize.text.function=function(x) x,
      format.args = list(big.mark = ","),
      NA.string = "")
@
\end{tabular}
\end{table}
