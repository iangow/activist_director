\Sexpr{set_parent('../activist_directors.Rnw')}
\Sexpr{opts_chunk$set(cache=TRUE, warning=FALSE, echo=FALSE, message=FALSE)}

<<outs_load_libraries, cache=FALSE, include=FALSE>>=
# Yihui Xie recommends _not_ caching the loading of packages used
# by several chunks.
library(stargazer)
library(xtable)
library(DBI)
library(car)
library(dplyr, warn.conflicts = FALSE)
library(lfe)
@

<<outs_winsorize>>=
# Winsorize selected variables in a data frame
win01 <- function(x, prob = 0.01, p_low = prob, p_high = 1 - prob) {
  cuts <- quantile(x, probs = c(p_low, p_high), type = 2, na.rm = TRUE)
  x[x < cuts[1]] <- cuts[1]
  x[x > cuts[2]] <- cuts[2]
  x
}

controls <- paste("analyst inst size_return mv btm leverage payout roa sale_growth",
                  "num_directors outside_percent staggered_board log_at")

omits <- unlist(strsplit(controls, "\\s+"))
@

<<outs_functions, include=FALSE>>=
# Simple regressions ----
combineVars <- function(vars) {
    paste(unlist(strsplit(vars, "\\s+")), collapse=" + ")
}

ols.model <- function(data, lhs, rhs, cluster1) {
    model <- paste0(paste0(lhs, " ~ ", combineVars(rhs)), " | 0 | 0 | permno")
    felm(formula(model), data=data)
}

make.fTest.table <- function(model.set) {

    fTest <- function(model) {
        c(linearHypothesis(model, "affiliatedaffiliated - affiliatedz_other_activism")[4][2,],
          linearHypothesis(model, "affiliatedunaffiliated - affiliatedz_other_activism")[4][2,],
          linearHypothesis(model, "affiliatedaffiliated - affiliatedunaffiliated")[4][2,])
    }

    temp <- as.data.frame(bind_cols(lapply(model.set, fTest)))
    row.names(temp) <- c("Affiliated = Other activism",
                         "Unaffiliated = Other activism",
                         "Affiliated = Unaffiliated")
    return(temp)
}

# Function to prepare a table of F-test p-values for
# inclusion by stargazer.
convertToLines <- function(ftable) {
    if(is.null(ftable)) return(NULL)

    # Convert the data frame to a list of rows
    temp <- split(ftable, rownames(ftable))

    # Convert a row from a data frame into a vector
    convertLine <- function(line) {
        c(rownames(line),
          formatC(unlist(line), format="f", digits=3))
    }

    # Make a header for the F-test portion of the table
    first.row <- list("", "F-tests for equal coefficients (p-values)", "\\hline")
    return(c(first.row, lapply(temp, convertLine), ""))
}

stargazer.mod <- function(model.set, col.labels, row.labels, omits, ftable=NULL) {
    stargazer(model.set,
              dep.var.labels=col.labels,
              covariate.labels=row.labels,
              align=TRUE, float=FALSE, no.space=TRUE,
              omit=c("^sic", "^year", "^Constant", omits),
              keep.stat=c("n", "adj.rsq"),
              omit.table.layout="n",
              font.size="small",
              add.lines=convertToLines(ftable))
}

xtable.mod <- function(summ) {
    print(xtable(summ, digits=3,
                 display=c("s", rep("f",(dim(summ)[2])))),
          include.rownames=TRUE,  include.colnames=TRUE, only.contents=TRUE,
          size="footnotesize", type="latex",
          sanitize.text.function=function(x) x,
          format.args = list(big.mark = ","))
}

# RHS of models
rhs <- paste("affiliated year sic2", controls)

trim <- function (x) {
    # Function removes spaces at end or beginning
    # And removes multiple spaces
    x <- gsub("^\\s+|\\s+$", "", x)
    x <- gsub("\\s+", " ", x)
}

get.model <- function(the.var, data, include.lag = FALSE,
                      changes = FALSE, use.controls = FALSE) {

    data <-
        data %>%
        mutate_at(c("year", "affiliated", "sic2"), as.factor)

    rhs <- trim(paste(rhs, if(include.lag) "lagged.var", if(use.controls) controls))

    if (include.lag) {
        data <- mutate_(data, lagged.var = the.var)

        # Exclude lagged LHS from RHS if already there.
        rhs <- paste(setdiff(unlist(strsplit(rhs, "\\s+")), the.var), collapse=" ")
    }
    if (include.lag) {
        lhs <- paste0(the.var,"_p2")
    } else if (changes) {
        lhs <- paste0("(", the.var,"_p2 - ", the.var, ")")
    } else {
        lhs <- the.var
    }

    ols.model(data=data, lhs=lhs, rhs=rhs)
}

fix_affiliated <- function(x) {
    case_when(x == "affiliated" ~ "affiliated",
              x %in% c("unaffiliated", "activist_director") ~ "unaffiliated",
              x %in% c("activist_demand", "activism") ~ "z_other_activism",
              TRUE ~ "_none")
}
@

\Sexpr{opts_chunk$set(cache.extra = tools::md5sum('outcome_div_acq.sql'))}
<<outs_div_acq_data, dependson="outs_winsorize">>=

# Get data from PostgreSQL
pg <- dbConnect(RPostgres::Postgres(), bigint = "integer")

rs <- dbExecute(pg, "SET search_path TO activist_director")
rs <- dbExecute(pg, "SET work_mem='3GB'")

dsedelist <- tbl(pg, sql("SELECT * FROM crsp.dsedelist"))
wrds_keydev <- tbl(pg, sql("SELECT * FROM ciq.wrds_keydev"))
ccmxpf_linktable <- tbl(pg, sql("SELECT * FROM crsp.ccmxpf_linktable"))
dsedist <- tbl(pg, sql("SELECT * FROM crsp.dsedist"))

outcome_controls <- tbl(pg, "outcome_controls")
activist_demands <- tbl(pg, "demands")
outcome_changes <- tbl(pg, "outcome_changes")

outcome_controls_mod <-
    outcome_controls %>%
    mutate(default_p2 = if_else(firm_exists_p2, FALSE, NA),
           default_p3 = if_else(firm_exists_p3, FALSE, NA),
           default_num_p2 = if_else(firm_exists_p2, 0L, NA),
           default_num_p3 = if_else(firm_exists_p3, 0L, NA),
           datadate_p2 = sql("datadate + interval '2 years'"),
           datadate_p3 = sql("datadate + interval '3 years'")) %>%
    select(permno, matches("^(datadate|default_|firm_exists_)"))

delisting <-
    dsedelist %>%
    select(permno, dlstdt, dlstcd) %>%
    mutate(delist = dlstcd > 100L,
           merger = between(dlstcd, 200L, 399L),
           failure = between(dlstcd, 520L, 599L)) %>%
    select(-dlstcd)

permno_link <-
    ccmxpf_linktable %>%
    filter(usedflag=='1', linkprim %in% c('C', 'P')) %>%
    rename(permno = lpermno) %>%
    select(gvkey, permno, linkdt, linkenddt)

spinoff <-
    wrds_keydev %>%
     filter(keydeveventtypeid == 137L,
           keydevtoobjectroletypeid == 4L,
           !is.na(gvkey)) %>%
    select(gvkey, announcedate) %>%
    compute()

spinoff_linked <-
    spinoff %>%
    inner_join(permno_link, by = "gvkey") %>%
    filter(announcedate >= linkdt,
           announcedate <= linkenddt | is.na(linkenddt)) %>%
    select(permno, announcedate) %>%
    mutate(year = date_part('year', announcedate)) %>%
    compute()

spinoff_crsp <-
    dsedist %>%
    mutate(year = date_part('year', rcrddt),
           crsp_date = greatest(dclrdt, exdt, rcrddt, paydt)) %>%
    rename(new_permno = acperm) %>%
    full_join(spinoff_linked, by = c("permno", "year")) %>%
    mutate(date = coalesce(crsp_date, announcedate)) %>%
    select(permno, new_permno, date)

divestiture <-
    wrds_keydev %>%
     filter(keydeveventtypeid == 81L,
           keydevtoobjectroletypeid == 4L,
           !is.na(gvkey)) %>%
    select(gvkey, announcedate) %>%
    compute()

divestiture_linked <-
    divestiture %>%
    inner_join(permno_link, by = "gvkey") %>%
    filter(announcedate >= linkdt,
           announcedate <= linkenddt | is.na(linkenddt)) %>%
    select(permno, announcedate) %>%
    mutate(year = date_part('year', announcedate)) %>%
    compute()

acquisition <-
    wrds_keydev %>%
     filter(keydeveventtypeid == 81L,
           keydevtoobjectroletypeid == 3L,
           !is.na(gvkey)) %>%
    select(gvkey, announcedate) %>%
    compute()

acquisition_linked <-
    acquisition %>%
    inner_join(permno_link, by = "gvkey") %>%
    filter(announcedate >= linkdt,
           announcedate <= linkenddt | is.na(linkenddt)) %>%
    select(permno, announcedate) %>%
    mutate(year = date_part('year', announcedate)) %>%
    compute()

divestiture_count <-
    outcome_controls_mod %>%
    left_join(divestiture_linked, by = "permno") %>%
    mutate(divest_p2 = between(announcedate, datadate, datadate_p2),
           divest_p3 = between(announcedate, datadate, datadate_p3)) %>%
    group_by(permno, datadate) %>%
    summarize(num_divestiture_p2 =
                  sum(as.integer(coalesce(divest_p2, FALSE)),
                      na.rm = TRUE),
              num_divestiture_p3 =
                  sum(as.integer(coalesce(divest_p3, FALSE)),
                      na.rm = TRUE)) %>%
    ungroup() %>%
    mutate(divestiture_p2 = num_divestiture_p2 > 0,
           divestiture_p3 = num_divestiture_p3 > 0) %>%
    compute()

acquisition_count <-
    outcome_controls_mod %>%
    left_join(acquisition_linked,  by = "permno") %>%
    mutate(acquisition_p2 = between(announcedate, datadate, datadate_p2),
           acquisition_p3 = between(announcedate, datadate, datadate_p3)) %>%
    group_by(permno, datadate) %>%
    summarize(num_acquisition_p2 =
                  sum(as.integer(coalesce(acquisition_p2, FALSE)),
                      na.rm = TRUE),
              num_acquisition_p3 =
                  sum(as.integer(coalesce(acquisition_p3, FALSE)),
                      na.rm = TRUE)) %>%
    ungroup() %>%
    mutate(acquisition_p2 = num_acquisition_p2 > 0,
           acquisition_p3 = num_acquisition_p3 > 0) %>%
    compute()

spinoff_count <-
    outcome_controls_mod %>%
    left_join(spinoff_linked, by = "permno") %>%
    mutate(spinoff_p2 = between(announcedate, datadate, datadate_p2),
           spinoff_p3 = between(announcedate, datadate, datadate_p3)) %>%
    group_by(permno, datadate) %>%
    summarize(num_spinoff_p2 =
                  sum(as.integer(coalesce(spinoff_p2, FALSE)),
                      na.rm = TRUE),
              num_spinoff_p3 =
                  sum(as.integer(coalesce(spinoff_p3, FALSE)),
                      na.rm = TRUE)) %>%
    ungroup() %>%
    compute()

delisting_data <-
    outcome_controls_mod %>%
    left_join(delisting, by = "permno") %>%
    mutate(delist_p2 = delist & between(dlstdt, datadate, datadate_p2),
           delist_p3 = delist & between(dlstdt, datadate, datadate_p3),
           merger_p2 = merger & between(dlstdt, datadate, datadate_p2),
           merger_p3 = merger & between(dlstdt, datadate, datadate_p3),
           failure_p2 = failure & between(dlstdt, datadate, datadate_p2),
           failure_p3 = failure & between(dlstdt, datadate, datadate_p3)) %>%
    group_by(permno, datadate) %>%
    summarize(delist_p2 = bool_or(delist_p2),
              delist_p3 = bool_or(delist_p3),
              merger_p2 = bool_or(merger_p2),
              merger_p3 = bool_or(merger_p3),
              failure_p2 = bool_or(failure_p2),
              failure_p3 = bool_or(failure_p3)) %>%
    ungroup() %>%
    compute()

winsor.vars <- unlist(strsplit(controls, "\\s+"))

reg.data <-
    outcome_controls %>%
    inner_join(divestiture_count, by = c("permno", "datadate")) %>%
    inner_join(acquisition_count, by = c("permno", "datadate")) %>%
    inner_join(spinoff_count, by = c("permno", "datadate")) %>%
    inner_join(delisting_data, by = c("permno", "datadate")) %>%
    left_join(activist_demands, by = "campaign_ids") %>%
    collect() %>%
    mutate(across(ends_with("_demand"), ~ coalesce(., FALSE)),
           affiliated = fix_affiliated(affiliated),
           across(all_of(winsor.vars), win01))

rs <- dbDisconnect(pg)
@

\begin{table}[htb]
\caption{Divestitures and acquisitions}
\label{tbl:div_acq}
\begin{minipage}[t]{\columnwidth}
{\small
Table presents regressions of outcome variables on firm-year level activism indicators.
\textit{Acquisition} indicates the firm completed acquisitions within two years after year $t$.
\textit{Acquired} indicates delisting within two years of year $t$ with CRSP delisting code $\textrm{dlstcd} \in [200, 399]$.
\textit{Divestiture} indicates the firm completed divestitures and spinoffs within two years of year $t$.
Regressions include industry and year fixed effects and the following controls (Control variables are measured for the fiscal year-end of year $t$):
\textit{Total assets}, book value of total assets;
\textit{Analyst}, number of analyst forecasts for each firm-year (I/B/E/S);
\textit{Institutional},  proportion of the firm's outstanding stock held by institutions;
\textit{Size-adj. ret}, twelve-month size-adjusted returns;
\textit{Market value}, the value of market capitalization;
\textit{Book-to-market}, market capitalization divided by the book value of common equity;
\textit{Leverage}, ratio of debt to debt plus book value of common equity;
\textit{Payout} the ratio of the sum of dividends and repurchases divided to EBITDA;
\textit{ROA}, EBITDA divided by the lagged total assets;
\textit{Sales growth}, sales divided by lagged sales;
\textit{Num. directors}, the number of directors on the board;
\textit{Outside percent}, the percentage of outside directors;
\textit{Age}, the average age of directors;
\textit{Tenure}, the average tenure of directors;
\textit{Staggered board}, indicator for staggered board.
All controls and $\textit{CEO comp}$ are winsorized at the $1\%$ and $99\%$ levels.
Values in parentheses are standard errors clustered by firm.
*** (**, *) indicates significance at the 1\% (5\%, 10\%) level.}
\end{minipage}
\begin{tabularx}{\linewidth}{l*{4}{Y}}
<<outs_t_div_and_acq, dependson=c("outs_functions", "outs_div_acq_data"), results='asis'>>=
lhs.vars <- list("acquisition_p2", "merger_p2", "divestiture_p2")

t6.pa <- lapply(lhs.vars, get.model, data=reg.data, use.controls=TRUE)
summ <- make.fTest.table(t6.pa)
row.labels <- c("Affiliated director", "Unaffiliated director", "Other activism")
# row.labels <- NULL
col.labels <- c("Acquisition", "Acquired", "Divestiture")
names(summ) <- col.labels
stargazer.mod(t6.pa, col.labels, row.labels, omits, summ)
# Free up some memory
rm(t6.pa)
@
\end{tabularx}
\end{table}

% Panel B - CEO turnover and compensation
<<outs_ceo_data_step, dependson="outs_winsorize">>=

# Get data from PostgreSQL
pg <- dbConnect(RPostgres::Postgres(), bigint = "integer")
rs <- dbExecute(pg, "SET search_path TO activist_director")
ceo_outcomes <- tbl(pg, "ceo_outcomes")
activist_demands <- tbl(pg, "demands")

winsor.vars <- c(unlist(strsplit(controls, "\\s+")), "ceo_comp", "ceo_comp_p2")

reg.data <-
    ceo_outcomes %>%
    distinct() %>%
    left_join(activist_demands, by = "campaign_ids") %>%
    collect() %>%
    mutate(across(ends_with("_demand"), ~ coalesce(., FALSE)),
           affiliated = fix_affiliated(affiliated),
           across(all_of(winsor.vars), win01))

rs <- dbDisconnect(pg)
@

\newpage

\begin{center}
\begin{table}[htb]
\caption{CEO turnover and compensation}
\label{tbl:ceo}
\begin{minipage}[t]{\columnwidth}
% \begin{flushleft}
{\small
Table presents regressions of variables on firm-year level activism categorical variables.
$\textrm{CEO exit}_{(t, t+k)}$ indicates a change in CEO between the end of year $t$ and the end of year $t+k$.
$\textrm{CEO comp}_{t+2}$ is log of total CEO compensation in year $t+2$.
Controls are as described in Table \ref{tbl:div_acq}; coefficients omitted for space.
Values in parentheses are standard errors clustered by firm.
*** (**, *) indicates significance at the 1\% (5\%, 10\%) level.
}
% \end{flushleft}
\end{minipage}
\begin{tabularx}{\linewidth}{l*{3}{Y}}
<<outs_ceo_turnover, dependson=c("outs_functions", "outs_ceo_data_step"), results='asis'>>=
lhs.vars <- list("ceo_turnover", "ceo_comp")
# rhs <- paste("activist_director*remove_officer_demand year sic2", controls)

t6.pb <- lapply(lhs.vars, get.model, data=reg.data, include.lag=TRUE, use.controls=TRUE)
summ <- make.fTest.table(t6.pb)
col.labels <- c("$\\textrm{CEO exit}_{(t, t+2)}$", "$\\textrm{CEO comp}_{t+2}$")
row.labels <- c("Affiliated director", "Unaffiliated director", "Other activism",
                "$\\textrm{CEO exit}_{(t-1, t)}$", "$\\textrm{CEO comp}_{t}$")
# row.labels <- NULL
names(summ) <- col.labels
stargazer.mod(t6.pb, col.labels, row.labels, omits, summ)

@
\end{tabularx}
\end{table}
\end{center}

\Sexpr{opts_chunk$set(cache.extra = tools::md5sum('other_outcomes.sql'))}

<<outs_other_data_step, dependson="outs_winsorize">>=

# Get data from PostgreSQL
pg <- dbConnect(RPostgres::Postgres(), bigint = "integer")
rs <- dbExecute(pg, "SET search_path TO activist_director")
rs <- dbExecute(pg, "SET work_mem='5GB'")

outcome_controls <- tbl(pg, "outcome_controls")
activist_director_years <- tbl(pg, "activist_director_years")
outcomes <-
    tbl(pg, sql(paste0(readLines("other_outcomes.sql"), collapse="\n")))
activist_demands <- tbl(pg, "demands")

# Winsorize changes
lhs.vars <- c("cash", "leverage", "payout", "capex_cum", "rnd_cum", "adv_cum")

winsor.vars <- unique(c(unlist(strsplit(controls, "\\s+")), lhs.vars,
                        paste0(lhs.vars, "_p1"),
                        paste0(lhs.vars, "_p2"),
                        paste0(lhs.vars, "_p3")))

reg.data <-
    outcome_controls %>%
    inner_join(outcomes, by = c("gvkey", "datadate")) %>%
    inner_join(activist_director_years, by = c("permno", "datadate")) %>%
    filter(firm_exists_p2) %>%
    left_join(activist_demands, by = "campaign_ids") %>%
    collect() %>%
    mutate(across(ends_with("_demand"), ~ coalesce(., FALSE)),
           affiliated = fix_affiliated(affiliated),
           across(all_of(winsor.vars), win01))

rs <- dbDisconnect(pg)
@

% Financing and investment
\newpage
\begin{table}[htb]
\caption{Capital structure and payouts}
\label{table:fin}
\begin{minipage}[t]{\columnwidth}
{\small
\textit{Cash} is calculated as the ratio of total cash and short-term
    investments to the book value of total assets.
\textit{Leverage} is measured as the ratio of book value of debt to the
    sum of the book value of debt and equity.
\textit{Payout} is measured as the ratio of total dividends and share repurchases to
    EBITDA for the two years after year $t$.
Controls are as described in Table \ref{tbl:div_acq}; coefficients omitted for space.
Values in parentheses are standard errors clustered by firm.
*** (**, *) indicates significance at the 1\% (5\%, 10\%) level.}
\end{minipage}
\begin{tabularx}{\linewidth}{l*{4}{Y}}
<<outs_t_cap_struct, dependson=c("outs_functions", "outs_other_data_step"), error=FALSE, results='asis'>>=
# Export tables to spreadsheet
lhs.vars <- list("cash", "leverage", "payout")
# rhs <- paste("activist_director*leverage_demand year sic2", controls)

t6.pd <- lapply(lhs.vars, get.model, data=reg.data, include.lag=TRUE, use.controls=TRUE)
row.labels <- c("Affiliated director", "Unaffiliated director", "Other activism",
               "$\\textrm{Dep. var.}_{t}$")
# row.labels <- NULL
col.labels <- c("Cash", "Leverage", "Payout")
summ <- make.fTest.table(t6.pd)
names(summ) <- col.labels
stargazer.mod(t6.pd, col.labels, row.labels, omits, summ)

rm(t6.pd)
@
\end{tabularx}
\end{table}
\newpage

\newpage
\begin{table}[htb]
\caption{Investment}
\label{tbl:invest}
\begin{minipage}[t]{\columnwidth}
%\begin{flushleft}
{\small
Table presents regressions of variables on firm-year level activism categorical variables.
% \textit{Tax rate} is measured as the ratio of total tax expense for two years after announcement of activism to the pre-tax income during the same period.
\textit{CapEx} is measured as the ratio of capital expenditure for two years after announcement of activism to the lagged book value of total assets.
\textit{R\&D} is measured as the ratio of total R\&D expenditure for two years after announcement of activism to the lagged book value of total assets.
\textit{Advertising} is measured as the ratio of advertising expenditure for two years after announcement of activism to the lagged book value of total assets.
Controls are as described in Table \ref{tbl:div_acq}; coefficients omitted for space.
Values in parentheses are standard errors clustered by firm. *** (**, *) indicates significance at the 1\% (5\%, 10\%) level.
}
%\end{flushleft}
\end{minipage}
\begin{tabularx}{\linewidth}{l*{4}{Y}}
<<outs_t_inv, dependson=c("outs_functions", "outs_other_data_step"), results='asis'>>=
# Export tables to spreadsheet
lhs.vars <- list("capex_cum", "rnd_cum", "adv_cum")
# rhs <- paste("activist_director*other_gov_demand year sic2", controls)

t6.pf <- lapply(lhs.vars, get.model, data=reg.data, include.lag=TRUE, use.controls=TRUE)
summ <- make.fTest.table(t6.pf)
row.labels <- c("Affiliated director", "Unaffiliated director", "Other activism",
               "$\\textrm{Dep. var.}_{t}$")
# row.labels <- NULL
col.labels <- c("$\\textrm{CapEx}$",
                "$\\textrm{R\\&D}$",
                "$\\textrm{Advertising}$")
names(summ) <- col.labels

stargazer.mod(t6.pf, col.labels, row.labels, omits, summ)
rm(t6.pf)
@
\end{tabularx}
\end{table}
