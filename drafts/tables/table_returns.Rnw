\Sexpr{set_parent('../activist_directors.Rnw')}
\Sexpr{opts_chunk$set(echo=FALSE, message=FALSE, cache=TRUE)}

<<load_packages, include=FALSE, cache=FALSE>>=
library(xtable)
library(doBy)
library(stargazer)
library(lmtest)
library(sandwich)
@

<<ret_data_step, include=FALSE>>==
## PostgreSQL Connection
library(RPostgreSQL)
pg <- dbConnect(PostgreSQL())

merged <- dbGetQuery(pg, "SELECT * FROM activist_director.event_returns")

rs <- dbDisconnect(pg)

merged$category <- as.factor(merged$category)
@

<<return_functions, include=FALSE, message=FALSE>>=
# Functions to extract fitted models, etc. from list of lists
# constructed by ols.model function below.
out.table <- function(data, lhs, rhs, caption="Some returns",
                      label=FALSE, ff=TRUE, use.caption=TRUE) {

    lhsLabels <- function(text) {
        text <- gsub("^ret.*mkt.*$", "$R^{MKT}$", text, perl=TRUE)
        text <- gsub("^ret_appt_m12p0_sz*$", "$R^{SZ}_{(-12, 0)}$", text, perl=TRUE)
        text <- gsub("^ret_appt_m0p12_sz*$", "$R^{SZ}_{(0, +12)}$", text, perl=TRUE)
        text <- gsub("^ret_appt_m0p24_sz*$", "$R^{SZ}_{(0, +24)}$", text, perl=TRUE)
        text <- gsub("^ret_appt_m12_annc_sz*$", "$R^{SZ}_{(-12, annc)}$", text, perl=TRUE)
        text <- gsub("^ret_appt_annc_appt_sz*$", "$R^{SZ}_{(annc, appt)}$", text, perl=TRUE)
        text <- gsub("^ret.*sz.*$", "$R^{SZ}$", text, perl=TRUE)
        text <- gsub("^ab_vwret.*$", "$R^{FFV}$", text, perl=TRUE)
        text <- gsub("^ab_ewret.*$", "$R^{FFE}$", text, perl=TRUE)
        text <- gsub("^ret.*$", "$R$", text, perl=TRUE)
        return(text)
    }

    rhs.labels <-
        switch(rhs,
               "category"=if (any(grepl("_appt", lhs)))
                                 "Activist director" else
                                 c("Non-board activism", "Board demand", "Activist director"),
               "affiliated"=if (any(grepl("_appt", lhs)))
                                c("Affiliated director", "Non-affiliated director") else
                                   c("Non-board activism", "Board demand",
                                     "Affiliated director", "Non-affiliated director"),
               "activist_director"=c("Non-activist director", "Activist director"),
               "early"=if (any(grepl("_appt", lhs)))
                            c("Early appointment", "Late appointment") else
                             c("Non-board activism", "Board demand",
                               "Early appointment", "Late appointment"),
                "big_investment"=if (any(grepl("_appt", lhs)))
                                    c("Invest. $>$ \\$100m",
                                      "Invest. $<$ \\$100m") else
                                      c("Non-board activism", "Board demand",
                                        "Invest. $>$ \\$100m",
                                        "Invest. $<$ \\$100m"),
                "1"=c("Activist director"),
                levels(reg.data[, rhs]))

     if (rhs !="1") rhs <- paste0(rhs, "-1")

    lhs.labels <- lhsLabels(lhs)

    out.model <- function(data, lhs, rhs, lhs.labels, rhs.labels,
                          cluster1=NULL, label=FALSE) {

        getFitted <- function(list) {
            temp <- list()
        for (i in 1:length(list)) {
            temp[[i]] <- list[[i]][[1]]
        }
            return(temp)
        }

        # Get standard errors
        getSEs <- function(a.list) {
          temp <- list()
          for (i in 1:length(a.list)) {
            temp[[i]] <- a.list[[i]][[2]][,2]
          }
          return(temp)
        }

        # Get p-values
        getPs <- function(a.list) {
          temp <- list()
          for (i in 1:length(a.list)) {
            temp[[i]] <- a.list[[i]][[2]][,4]
          }
          return(temp)
        }

        combineVars <- function(vars) {
            paste(unlist(strsplit(vars, "\\s+")), collapse=" + ")
        }

        ols.model <- function(data, lhs, rhs, cluster1) {
          model <- paste0(lhs, " ~ ", combineVars(rhs))
          fitted <- lm(model, data=data, na.action="na.omit")
          return(list(fitted, coeftest(fitted,vcovHC)))
        }

        get.model <- function(lhs) {
            ols.model(data, lhs=lhs, rhs=rhs)
        }

        model.set <- lapply(lhs.vars, get.model)

        stargazer(getFitted(model.set),
              covariate.labels=rhs.labels,
              dep.var.labels=lhs.labels,
              p=getPs(model.set),
              se=getSEs(model.set),
              align=TRUE, float=FALSE, no.space=TRUE,
              keep.stat=c("n"))
    }

    table_text_before <-
    paste("
    \\begin{table}[htb]",
    if (use.caption) { paste("\\caption{Stock returns}", if(label) "\\label{tbl:returns}" else "",
    "\\begin{minipage}[t]{\\columnwidth}
    \\begin{flushleft}
    {
     Table presents returns by category of activism where
    $R$, $R^{MKT}$, $R^{SZ}$ denote
        raw, market-adjusted, and size-adjusted returns respectively.",
     if (ff) "$R^{FFV}$ ($R^{FFE}$) denotes value-weighted (equal-weighted) Fama-French three-factor adjusted returns." else "",
    "\\newline}
    \\end{flushleft}
    \\end{minipage}") } else "",
    "\\begin{tabularx}{\\linewidth}{l*{4}{Y}}
    \\multicolumn{5}{l}{{", caption, "}} \\\\")

    table_text_after <- paste("
    \\end{tabularx}
    \\end{table}", if (use.caption) "\\addtocounter{table}{-1}" else "")
    cat(table_text_before)
    out.model(data, lhs, rhs, lhs.labels, rhs.labels, label=label)
    cat(table_text_after)
}
@

%\begin{landscape}
<<return_data_prep, cache=TRUE, dependson="ret_data_step", results='asis'>>=
reg.data <- subset(merged, permno!=66800) # Drop Greenburg-AIG event
rhs <- "category"
@

<<returns_panel_a, dependson=c("return_data_prep", "return_functions"), results='asis'>>=
caption <- "Panel A: Days $-1$ to $+1$ around announcement of activism."
lhs.vars <- c("ret_d_annc", "ret_d_annc_mkt", "ret_d_annc_sz")
out.table(reg.data, lhs.vars, rhs=rhs, caption, label=TRUE, ff=FALSE)
@

<<returns_panel_c, dependson=c("return_data_prep", "return_functions"), results='asis'>>=
caption <- "Panel B: Days $-1$ to $+1$ around announcement of settlement."
lhs.vars <- c("ret_d_any_sett", "ret_d_any_sett_mkt", "ret_d_any_sett_sz")
out.table(reg.data, lhs.vars, rhs=rhs, caption, label=FALSE, ff=FALSE)
@

% \clearpage
<<return_data_prep_appt, cache=TRUE, dependson="ret_data_step", results='asis'>>=
reg.data <- subset(merged, !is.na(ret_d_appt & permno!=66800)) # Drop Greenburg-AIG event
rhs <- "1"
@

<<returns_panel_d, dependson=c("return_data_prep_appt", "return_functions"), results='asis'>>=
caption <- "Panel C: Days $-1$ to $+1$ around announcement of appointment."
lhs.vars <- c("ret_d_appt", "ret_d_appt_mkt", "ret_d_appt_sz")
out.table(reg.data, lhs.vars, rhs=rhs, caption, label=FALSE, ff=FALSE)
@

<<returns_panel_e, dependson=c("return_data_prep_appt", "return_functions"), results='asis'>>=
caption <- "Panel D: Long-term returns around announcement of appointment."
lhs.vars <- c("ret_appt_m12p0_sz", "ret_appt_m0p12_sz", "ret_appt_m0p24_sz",
              "ret_appt_m12_annc_sz", "ret_appt_annc_appt_sz")
out.table(reg.data, lhs.vars, rhs=rhs, caption, label=FALSE, ff=FALSE)
@
\addtocounter{table}{1}
% \clearpage
%\end{landscape}
