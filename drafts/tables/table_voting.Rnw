\Sexpr{set_parent('../activist_directors.Rnw')}
\Sexpr{opts_chunk$set(cache=TRUE, warning=FALSE, echo=FALSE, message=FALSE)}

<<vote_packages, cache=FALSE, include=FALSE>>=
library(DBI)
library(dplyr, warn.conflicts = FALSE)
library(stargazer)
@

<<vote_data, include=FALSE>>=
# Get data from database ----
pg <- dbConnect(RPostgres::Postgres())
rs <- dbExecute(pg, "SET work_mem = '3GB'")
rs <- dbExecute(pg, "SET search_path TO activist_director, risk")

permnos <- tbl(pg, "permnos")
risk.vavoteresults <- tbl(pg, "vavoteresults")
risk.issrec <- tbl(pg, "issrec")
activist_directors <- tbl(pg, "activist_directors")

vavoteresults <-
    risk.vavoteresults %>%
    left_join(risk.issrec) %>%
    mutate(itemonagendaid = as.integer(itemonagendaid)) %>%
    filter(issagendaitemid %in% c('S0299', 'M0299', 'M0201', 'S0201', 'M0225'),
           itemdesc %~% '^Elect',
           voteresult != 'Withdrawn',
           !(agendageneraldesc %ilike% '%inactive%'),
           !(votedfor %in% c(0L,1L) |
                 greatest(votedagainst, votedabstain, votedwithheld) %in% c(0L, 1L))) %>%
    mutate(last_name = sql("(extract_name(itemdesc)).last_name"),
           first_name = sql("(extract_name(itemdesc)).first_name"),
           issrec = issrec == "For") %>%
    compute()

# When there are multiple items (i.e., in contested elections), we need to
# aggregate votes by ballotitem number to get all votes cast for the
# competing directors
multiple_items <-
    vavoteresults %>%
    filter(issagendaitemid %in% c('M0299','S0299')) %>%
    group_by(companyid, meetingid, ballotitemnumber) %>%
    summarise(votes_cast = sum(votedfor + votedagainst + votedabstain, na.rm = TRUE),
              num_items = n_distinct(itemdesc)) %>%
    filter(num_items > 1) %>%
    select(-num_items) %>%
    compute()

# Otherwise we just add up votes for the director.
# Sometimes the votedagainst number is duplicated as votewithheld, so we
# want to just take the one number in these cases. Otherwise, I think
# we should include for, against, withheld, and abstain in the denominator.
single_items <-
    vavoteresults %>%
    anti_join(multiple_items) %>%
    mutate(votes_cast = votedfor +
               if_else(!is.na(votedwithheld) && votedwithheld==votedagainst,
                       votedagainst,
                       coalesce(votedagainst, 0) + coalesce(votedwithheld, 0)) +
               coalesce(votedabstain, 0)) %>%
    select(companyid, meetingid, ballotitemnumber, votes_cast) %>%
    filter(!is.na(votes_cast)) %>%
    compute()

# Combine the two mutually exclusive datasets
votes_cast <-
    multiple_items %>%
    union_all(single_items) %>%
    left_join(multiple_items %>% mutate(contested = TRUE)) %>%
    mutate(contested = coalesce(contested, FALSE)) %>%
    ungroup() %>%
    compute()

# Calculate vote_pct
director_votes <-
    vavoteresults %>%
    inner_join(votes_cast, by = c("companyid", "meetingid", "ballotitemnumber")) %>%
    mutate(vote_pct = if_else(votes_cast > 0, votedfor/votes_cast, NA_real_)) %>%
    select(itemonagendaid, last_name, first_name,
           meetingid, companyid, meetingdate, vote_pct, contested, cusip, issrec) %>%
    mutate(year = as.integer(date_part('year', meetingdate))) %>%
    filter(!contested) %>%
    compute()

activist_directors_mod <-
    activist_directors %>%
    mutate(upper_last_name = upper(last_name),
           upper_first_name = upper(first_name),
           initial3 = substr(upper_first_name, 1L, 3L),
           initial2 = substr(upper_first_name, 1L, 2L),
           initial1 = substr(upper_first_name, 1L, 1L)) %>%
    compute()

director_votes_mod <-
    director_votes %>%
    mutate(ncusip = substr(cusip, 1L, 8L)) %>%
    left_join(permnos, by = "ncusip") %>%
    mutate(itemonagendaid = as.integer(itemonagendaid)) %>%
    mutate(upper_last_name = upper(last_name),
           upper_first_name = upper(first_name),
           initial3 = substr(upper_first_name, 1L, 3L),
           initial2 = substr(upper_first_name, 1L, 2L),
           initial1 = substr(upper_first_name, 1L, 1L)) %>%
    select(itemonagendaid, permno, meetingdate, upper_last_name,
           matches("^initial")) %>%
    filter(!is.na(itemonagendaid)) %>%
    compute()

match_init3 <-
    activist_directors_mod %>%
    inner_join(director_votes_mod,
               by = c("permno", "upper_last_name", "initial3")) %>%
    select(campaign_id, appointment_date, last_name,
           first_name, itemonagendaid)

match_init2 <-
    activist_directors_mod %>%
    inner_join(director_votes_mod,
               by = c("permno", "upper_last_name", "initial2")) %>%
    select(campaign_id, appointment_date, last_name,
           first_name, itemonagendaid)

match_init1 <-
    activist_directors_mod %>%
    inner_join(director_votes_mod,
               by = c("permno", "upper_last_name", "initial1")) %>%
    select(campaign_id, appointment_date, last_name,
           first_name, itemonagendaid) %>%
    compute()

match_a <-
    match_init3 %>%
    union_all(
        match_init2 %>%
            anti_join(match_init3)) %>%
    compute()

va_match <-
    match_a %>%
    union_all(
        match_init1 %>%
            anti_join(match_a)) %>%
    compute()

ad_vote_data <-
    activist_directors %>%
    select(campaign_id, first_name, last_name, appointment_date, independent) %>%
    inner_join(va_match) %>%
    inner_join(director_votes) %>%
    filter(meetingdate > sql("appointment_date - interval '1 week'")) %>%
    group_by(campaign_id, first_name, last_name, appointment_date) %>%
    arrange(meetingdate) %>%
    mutate(vote_num = row_number()) %>%
    ungroup() %>%
    compute()

director_votes <- collect(director_votes)
va_match <- collect(va_match)
ad_vote_data <- collect(ad_vote_data)

rs <- dbDisconnect(pg)
@

<<vote_func, include=FALSE>>=
library(lubridate)

get_reg_data <- function(vote_number) {

    ad_data <-
        ad_vote_data %>%
        mutate(appointment_date = as.Date(appointment_date)) %>%
        mutate(appointment_date = pmin(meetingdate, appointment_date)) %>%
        filter(vote_num == vote_number) %>%
        select(-vote_num, -campaign_id)

    other_dirs <-
        director_votes %>%
        anti_join(ad_data, by="itemonagendaid") %>%
        semi_join(ad_data, by="meetingid") %>%
        mutate(appointment_date = as.Date(NA))

    reg_data <-
        other_dirs %>%
        mutate(independent = NA) %>%
        union_all(ad_data) %>%
        mutate(affiliated = coalesce(!independent, FALSE),
               independent = coalesce(independent, FALSE)) %>%
        mutate(meetingid = factor(meetingid))

    return(reg_data)
}
@

<<vote_regs, dependson=c("vote_data", "vote_func"), include=FALSE>>=
# Functions
library(psych)
library(car)
library(doBy)
source("https://raw.githubusercontent.com/iangow/acct_data/master/code/cluster2.R")

### Regression Analyses----

#### voting_p1 ~ activism
reg.data <- get_reg_data(1L)

# fm <- lm(vote_pct ~ factor(meetingid), data = reg.data)
# anova(fm)

fm_t0 <- lm(vote_pct * 100 ~ independent + affiliated + meetingid,
            data=reg.data, na.action="na.exclude")
fm_t0_se <- coeftest.cluster(reg.data, fm_t0, cluster1="companyid")

#### voting_p1 ~ activism (activist_director firms only)
## reg.data <- subset(vote.data, activist_director_period)
fm_t0_iss <- lm(vote_pct * 100 ~ independent + affiliated + issrec +
                      meetingid,
                  data=reg.data, na.action="na.exclude")
fm_t0_iss_se <- coeftest.cluster(reg.data, fm_t0_iss, cluster1="companyid")

reg.data <- get_reg_data(2L) %>% mutate(vote_pct_p1 = vote_pct)
fm_t1 <- lm(vote_pct_p1 * 100 ~ independent + affiliated + meetingid,
                  data=reg.data, na.action="na.exclude")
fm_t1_se <- coeftest.cluster(reg.data, fm_t1, cluster1="companyid")

fm_t1_iss <- lm(vote_pct_p1 * 100 ~ independent + affiliated  + issrec
                + meetingid,
                  data=reg.data, na.action="na.exclude")
fm_t1_iss_se <- coeftest.cluster(reg.data, fm_t1_iss, cluster1="companyid")

reg.data <- get_reg_data(3L) %>% mutate(vote_pct_p2 = vote_pct)
fm_t2 <- lm(vote_pct_p2 * 100 ~ independent + affiliated + meetingid,
                  data=reg.data, na.action="na.exclude")
fm_t2_se <- coeftest.cluster(reg.data, fm_t2, cluster1="companyid")

fm_t2_iss <- lm(vote_pct_p2 * 100 ~ independent + affiliated  + issrec
                + meetingid,
                  data=reg.data, na.action="na.exclude")
fm_t2_iss_se <- coeftest.cluster(reg.data, fm_t2_iss, cluster1="companyid")
@
\begin{landscape}
\begin{table}[htb]
\caption{Director elections}
\label{tbl:dir_elections}
\begin{minipage}[t]{\columnwidth}
{\small
This table presents results of regressions where the dependent variable is voting support for directors.
The sample comprises shareholder meetings where activist directors were up for election and includes all directors considered at such meetings.
Periods $t$, $t+1$, and $t+2$ refer to the first, second, and third elections, respectively, for an activist director upon or after appointment.
Sample excludes contested elections, where vote support will be split between incumbents and challengers.
All columns include meeting fixed effects.
    \newline}
\end{minipage}
\begin{tabularx}{6.5in}{l*{3}{Y}}
<<vote_output, dependson="vote_regs", results='asis'>>=
stargazer(fm_t0, fm_t0_iss,
          fm_t1, fm_t1_iss,
          fm_t2, fm_t2_iss,
          omit = c("Constant", "(meetingid|activist_director.*affiliated)"),
          float = FALSE, align = TRUE, font.size = "small",
          keep.stat=c("n"), no.space = TRUE,
          digits = 2,
          dep.var.labels = c("$\\textit{Support}_{t}$", "$\\textit{Support}_{t+1}$",
                             "$\\textit{Support}_{t+2}$"),
          covariate.labels = c("Activist director, unaffiliated",
                               "Activist director, affiliated", "ISS for"),
          se = list(fm_t0_se[ ,2], fm_t0_iss_se[ ,2],
                  fm_t1_se[ ,2], fm_t1_iss_se[ ,2],
                  fm_t2_se[ ,2], fm_t2_iss_se[ ,2]))
@
\end{tabularx}
\end{table}
\end{landscape}
