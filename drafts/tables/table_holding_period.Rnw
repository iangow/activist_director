%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%          Activist holding periods                %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
\Sexpr{set_parent('../activist_directors.Rnw')}
\Sexpr{opts_chunk$set(echo=FALSE, message=FALSE)}

<<holdings_updated, include=FALSE, warning=FALSE>>=
if(exists("holdings.updated")) opts_chunk$set(cache.extra=holdings.updated)
@

<<quantreg_libraries, cache=FALSE>>=
library(survival)
library(quantreg)
library(DBI)
library(dplyr, warn.conflicts = FALSE)
library(xtable)
@

<<quantreg_data_step, include=FALSE, warning=FALSE, cache=TRUE>>=
pg <- dbConnect(RPostgres::Postgres())

rs <- dbExecute(pg, "SET work_mem = '5GB'")
rs <- dbExecute(pg, "SET search_path TO activist_director, public")

activist_holdings <- tbl(pg, "activist_holdings")
activism_events <- tbl(pg, "activism_events")
activist_demands <- tbl(pg, "demands")

activist_exit <-
    activist_holdings %>%
    group_by(activist_name, permno, entry_date) %>%
    summarize(exit = bool_or(exit), .groups = "drop") %>%
    compute()

survival_data <-
    activist_holdings %>%
    select(-exit) %>%
    inner_join(activist_exit, by = c("activist_name", "permno", "entry_date")) %>%
    filter(!is.na(permno), activism, quarter>0,
           !activist_name %in% c("California State Teachers Retirement System",
                                 "New York State Common Retirement Fund",
                                 "Ontario Teachers' Pension Plan Board",
                                 "The California Public Employees Retirement System")) %>%
    select(activist_name, permno, exit, entry_date, eff_announce_date,
           first_appointment_date, exit_date, affiliated) %>%
    distinct() %>%
    collect()

holding_period_by_demand <-
    activism_events %>%
    select(permno, eff_announce_date, campaign_ids) %>%
    left_join(activist_demands, by = "campaign_ids") %>%
    collect()

demand_types <- c("acquisition", "block_acquisition", "divestiture", "payout",
                  "leverage", "remove_director", "add_indep", "remove_officer",
                  "remove_defense", "compensation", "other_gov")
demand_type_regex <- paste0(demand_types, collapse = "|")
outcome_regex <- paste0("(", demand_type_regex, ")_outcome")
demand_regex <- paste0("(", demand_type_regex, ")_demand")

survival_data_by_demand <-
    survival_data %>%
    left_join(holding_period_by_demand,
              by = c("permno", "eff_announce_date")) %>%
    mutate(across(ends_with("_outcome"), ~ coalesce(., FALSE))) %>%
    rowwise() %>%
    mutate(any_outcome = any(c_across(matches(outcome_regex))),
           any_demand = any(c_across(matches(demand_regex))))

rs <- dbDisconnect(pg)
@

<<quantreg_analysis, dependson="quantreg_data_step", include=FALSE, warning=FALSE, cache=TRUE>>=
# data ready
surv <- with(survival_data,
             Surv(as.numeric(exit_date - entry_date), exit, type='right'))

#### Exit since Entry
quantreg1 <- crq(Surv(as.numeric(exit_date - entry_date), exit, type='right') ~ affiliated,
                 taus = 0.5,
                 data = survival_data,
                 na.action = "na.omit",
                 method = "Portnoy")
summary1 <- summary(quantreg1, taus = c(0.5, 0.5001))

#### Exit since Announcement
quantreg2 <- crq(Surv(as.numeric(exit_date - eff_announce_date), exit, type='right') ~ affiliated,
                 taus = 0.5,
                 data = survival_data,
                 na.action = "na.omit",
                 method = "Portnoy")
summary2 <- summary(quantreg2, taus = c(0.5, 0.5001))

#### Exit since Appointment
quantreg3 <- crq(Surv(as.numeric(exit_date - first_appointment_date), exit, type='right') ~ affiliated - 1,
                 data = subset(survival_data, !is.na(first_appointment_date)),
                 taus = 0.5,
                 na.action = "na.omit",
                 method = "Portnoy")
summary3 <- summary(quantreg3, taus = c(0.5, 0.5001))
@

<<get_coeffs, include=FALSE, cache=TRUE>>=
getCoefs <- function(model, ncols=3) {

    coefs <- model[[1]][["coefficients"]]
    ncols <- dim(coefs)[1]
    makeRow <- function(i) {

        # Get the coefficients and SEs, calculate p-values
        coef <- coefs[i, 1]
        se   <- coefs[i, 4]
        p    <- coefs[i, 6]

        # Standard stars
        stars <- ifelse(p < 0.01, "^{***}",
                        ifelse(p < 0.05, "^{**}",
                               ifelse(p < 0.1, "^{*}", " ")))

        # Add stars to coefficients, put parentheses around SEs
        bind_rows(tibble(row_type = "coef",
                         variable = rownames(coefs)[i],
                         value = paste0(formatC(coef, digits = 1, format="f"), stars)),
                  tibble(row_type = "se",
                         variable = rownames(coefs)[i],
                         value = paste0("(", formatC(se, digits = 1, format="f"), ")")))
    }

    # We have three coefficients we want to combine into a column and return
    return(bind_rows(lapply(1:ncols, makeRow)))
}
@

<<make_panels, dependson=c("quantreg_analysis", "get_coeffs"), cache=TRUE, warning=FALSE, include=FALSE>>=
# Get coefficients for each column
col1 <- getCoefs(summary1)
col2 <- getCoefs(summary2)
col3 <- getCoefs(summary3)

# Combine columns into a table
panel1 <-
  col1 %>%
  full_join(col2, by = c("row_type", "variable"))  %>%
  full_join(col3, by = c("row_type", "variable")) %>%
  mutate(variable = if_else(row_type == "se", "", variable)) %>%
  mutate(variable =
           case_when(variable == "affiliatedaffiliated" ~ "Affiliated director",
                     variable == "affiliatedunaffiliated" ~ "Unaffiliated director",
                     variable == "(Intercept)" ~ "Intercept")) %>%
  select(-row_type)

colnames(panel1) <- c("", "\\textrm{Entry--exit}", "\\textrm{Annc--exit}",
                      "\\textrm{Appt--exit}")

# Make a second panel with statistics for estimated holding periods for
# Activist director cases
coefs <- summary1[[1]]$coefficients[ , 1]
col1 <- rbind(coefs["(Intercept)"],
              coefs["(Intercept)"] + coefs["affiliatedaffiliated"],
              coefs["(Intercept)"] + coefs["affiliatedunaffiliated"])

coefs <- summary2[[1]]$coefficients[ , 1]
col2 <- rbind(coefs["(Intercept)"],
              coefs["(Intercept)"] + coefs["affiliatedaffiliated"],
              coefs["(Intercept)"] + coefs["affiliatedunaffiliated"])

coefs <- summary3[[1]]$coefficients[ , 1]
col3 <- rbind(NA,
              coefs["affiliatedaffiliated"],
              coefs["affiliatedunaffiliated"])

panel2 <- cbind(col1, col2, col3)
colnames(panel2) <- c("\\textrm{Entry--exit}", "\\textrm{Annc--exit}", "\\textrm{Appt--exit}")
row.names(panel2) <- c("Other activism", "Affiliated director", "Unaffiliated director")
@
\begin{table}[htb]
  \caption{Activist holding periods}
   \label{tbl:holdings}
  \begin{minipage}[t]{\linewidth}
%  \begin{flushleft}
\small
\tabularnewline
This table presents the results of a censored median regression analysis examining the holding period (in days) of activist groups in target firms, categorized by the type of activism.
\textit{Entry--exit} refers to the time (in days) between the record date of the first filing by the activist in which the target firm's stock is listed in their portfolio and the record date of the first filing in which it is not (exit date)
\textit{Annc--exit} refers to the time between the announcement of activism and the exit date.
\textit{Appt--exit} refers to the time between the first activist director appointment and the exit date.
\newline
% \end{flushleft}
\end{minipage}
% Following was copied from .tex output from stargazer.
% Panel A: Activist holding periods \\
\\
\begin{tabular}{lD{.}{.}{-1} D{.}{.}{-1} D{.}{.}{-1} c }

\multicolumn{2}{l}{Regression coefficients} \\
\hline
<<survival_panel1, dependson="make_panels", results='asis'>>=
# Output the table
print(xtable(panel1,
             display = c("s", rep("s",(dim(panel1)[2])))),
      include.rownames = FALSE, include.colnames = TRUE, only.contents = TRUE,
      size = "small", type = "latex",
      sanitize.text.function=function(x) x,
      format.args = list(big.mark = ","))
@
\\
\multicolumn{2}{l}{Implied median holding periods (days)} \\
\hline
\\
<<survival_panel2, dependson="make_panels", results='asis'>>=
# Output the table
print(xtable(panel2,
             display=c("s", rep("f",(dim(panel2)[2]))),
             digits = 1),
      include.rownames=TRUE,  include.colnames=TRUE, only.contents=TRUE,
      size="small", type="latex",
      sanitize.text.function=function(x) x,
      format.args = list(big.mark = ","),
      NA.string = "")
@
\end{tabular}
\end{table}

\clearpage
